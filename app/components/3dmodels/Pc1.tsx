/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 pc.gltf -t -r public
Author: blackrray (https://sketchfab.com/blackrray)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/pc-freepolyorg-c366c1dbb4744f7db12855ef1068a305
Title: PC-Freepoly.org
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    ["et_09_-_Default_0"]: THREE.Mesh;
    ["Object_08_-_Default_0"]: THREE.Mesh;
  };
  materials: {
    ["09_-_Default"]: THREE.MeshStandardMaterial;
    ["08_-_Default"]: THREE.MeshStandardMaterial;
  };
};

export function Pc1(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/pc/pc.gltf") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.733}>
        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <mesh
            geometry={nodes["et_09_-_Default_0"].geometry}
            material={materials["09_-_Default"]}
            rotation={[-Math.PI / 2, 0, 0]}
          />
          <mesh
            geometry={nodes["Object_08_-_Default_0"].geometry}
            material={materials["08_-_Default"]}
            rotation={[-Math.PI / 2, 0, 0]}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/pc/pc.gltf");
